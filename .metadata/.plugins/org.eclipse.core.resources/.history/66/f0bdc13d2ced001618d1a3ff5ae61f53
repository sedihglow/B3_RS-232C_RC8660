@ filename: init_syth_8660.s
@
@ Initializes the features and rates of the RC8660 through UART4
@
@ Written by: James Ross

.text
.global _init_syth_8660
_init_syth_8660:
@ UART definitions
.equ UART4_BASE,    0x481A8000 @ UART4          	      Base Address
.equ UART_TXHR,	    0x0	  	   @ THR Transmit Holding     register offset
.equ UART_MCR,      0x10 	   @ Modem CTRL 			  register offset

.equ CTS_CHECK, 	0x10	   @ Bit 4 used in MSR	  	  Mask
.equ THR_CHECK,	    0x20       @ Bit 5 used in LSR	  	  Mask
.equ DELIM,			0x0D	   @ Final character message  Val
.equ CR_LOCKBAUD,   0x0D	   @ Character to send to 8660 to lock Baud rate


@ register assignment definitions
uart4Base .req R10
cmdMsg 	  .req R1
thrReady  .req R2	@ Bool, when 1, ready
ctsReady  .req R3	@ Bool, when 1, ready

@********************* Start _init_syth_8660 ***********************************

	STMFD SP!, {R0-R10, LR}

	LDR uart4Base, =UART4_BASE
	
	@ Lock the baud rate. SEE NOTE IN INT_UART4 on strange behavior
	MOV R4, #CR_LOCKBAUD
	STR R4, [uart4Base, #UART_TXHR]
	
	/* Any command 75ms after baud rate is locked will be ignored. Will not have
	 * to worry about it since it puts CTS high during that time period so just
	 * check that. */
	 
/*	@ Change the voice of the talker.
	LDR R1, =VOICE
	BL SEND_COMMAND
		
	LDR R1, =VOICE
	
	
	LDMFD SP!, {R0-R10, PC}

SEND_COMMAND:
	STMFD SP!, {R0-R10, LR}
	
	@ Initialize flags
	MOV thrReady, #0x0
	MOV ctsReady, #0x0

	@ Assert RTS#	
	MOV R4, #0x02
	STRB R4, [uart4Base, #UART_MCR]

	
LOOP_WAIT_TILL_READY: @ R1 is the desired command to be passed to WAIT_TILL_READY
	@ See if CTS# is asserted
	LDR R4, [uart4Base, #UART_MSR]
	TST R4, #CTS_CHECK
	MOVNE ctsReady, #0x1 @ shows CTS is ready

	@ Check if THR is empty
	LDR R4, [uart4Base, #UART_LSR]
	TST R4, #THR_CHECK
	MOVNE thrReady, #0x1 @ THR ready, set flag

	@ Check if both cts and thr are ready
	CMP ctsReady, #0x1
	BNE WAIT_TILL_READY  @ CTS not asserted, check again
	
	CMP ctsReady, #0x1
	BNE WAIT_TILL_READY @ THR not asserted, check again
	
	@ Reset flags
	MOV thrReady, #0x0
	MOV ctsReady, #0x0
	
    LDRB R2, [R1], #1   @ Get character to send, increment addr
   	ADD R3, uart4Base, #UART_TXHR 
    STRB R4, [R2] 	@ Send char on the UART

	@ Check to see if we are on the last character
	CMP R5, #DELIM
		

	


	LDMFD SP!, {R0-R10, PC}
	
.data
.align 4
	VOICE:
		.ascii "pretend"
		.byte 0x0D
.align 4
	VOLUME:
		.ascii "aretend"
		.byte 0x0D
*/
.end
@*************** EOF **************