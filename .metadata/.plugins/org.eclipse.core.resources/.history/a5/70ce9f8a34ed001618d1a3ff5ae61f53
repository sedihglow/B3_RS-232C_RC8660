@ filename: init_syth_8660.s
@
@ Initializes the features and rates of the RC8660 through UART4
@
@ Written by: James Ross

.text
.global _init_syth_8660
_init_syth_8660:
@ UART definitions
.equ UART4_BASE,    0x481A8000 @ UART4          	      Base Address
.equ UART_TXHR,	    0x0	  	   @ THR Transmit Holding     register offset
.equ UART_MCR,      0x10 	   @ Modem CTRL 			  register offset
.equ UART_MSR,	    0x18	   @ Modem Status Reg 	      register offset
.equ UART_LSR,		0x14	   @ Line control reg		  register offset

.equ CTS_CHECK, 	0x10	   @ Bit 4 used in MSR	  	  Mask
.equ THR_CHECK,	    0x20       @ Bit 5 used in LSR	  	  Mask
.equ DELIM,			0x0D	   @ Final character message  Val
.equ CR_LOCKBAUD,   0x0D	   @ Character to send to 8660 to lock Baud rate


@ register assignment definitions
uart4Base .req R10
cmdMsg 	  .req R1
thrReady  .req R2	@ Bool, when 1, ready
ctsReady  .req R3	@ Bool, when 1, ready

@********************* Start _init_syth_8660 ***********************************

	STMFD SP!, {R0-R10, LR}

	LDR uart4Base, =UART4_BASE
	LDR cmdMsg, =SETTINGS
	
	@ Lock the baud rate. SEE NOTE IN INT_UART4 on strange behavior
	MOV R4, #CR_LOCKBAUD
	STR R4, [uart4Base, #UART_TXHR]
	
	/* Any command 75ms after baud rate is locked will be ignored. Will not have
	 * to worry about it since it puts CTS high during that time period so just
	 * check that. */
	
    @ Initialize flags
	MOV thrReady, #0x0
	MOV ctsReady, #0x0

	@ Assert RTS#	
	@MOV R4, #0x02
	@STRB R4, [uart4Base, #UART_MCR]
	
LOOP_WAIT_TILL_READY:
	@ See if CTS# is asserted
	LDR R4, [uart4Base, #UART_MSR]
	TST R4, #CTS_CHECK
	MOVNE ctsReady, #0x1 @ shows CTS is ready

	@ Check if THR is empty
	LDR R4, [uart4Base, #UART_LSR]
	TST R4, #THR_CHECK
	MOVNE thrReady, #0x1 @ THR ready, set flag

	@ Check if both cts and thr are ready
	CMP ctsReady, #0x1
	BNE LOOP_WAIT_TILL_READY  @ CTS not asserted, check again
	
	CMP ctsReady, #0x1
	BNE LOOP_WAIT_TILL_READY @ THR not asserted, check again

	@ Reset flags
	MOV thrReady, #0x0
	MOV ctsReady, #0x0
	
	@ Send character	
    LDRB R4, [cmdMsg], #1   @ Get character to send, increment addr
    STRB R4, [uart4Base, #UART_TXHR] 	@ Send char on the UART

	@ Check to see if we are on the last character
	CMP R4, #DELIM
	BNE LOOP_WAIT_TILL_READY @ not on last character, go wait to send next.

	@ Disable RTS#	
	@MOV R4, #0x0
	@STRB R4, [uart4Base, #UART_MCR]

	LDMFD SP!, {R0-R10, PC}
	
.data
.align 4
	SETTINGS:
		.byte 0x01   @ Start voice setting
		.ascii "10O"  @ Voice of
		.byte 0x01   @ Start of volume setting
		.ascii "1V"	 @ Set volume  of 9
		.byte 0x0D

.end
@*************** EOF **************