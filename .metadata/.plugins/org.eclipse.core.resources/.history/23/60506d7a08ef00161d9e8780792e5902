@ filename: int_director.s
@
@ Interrupt handler for UART4, GPIO1_31 button, eventually a timer
@
@ Written by: James Ross

.text
.global _int_director
_int_director:
@ Interupt definitions
.equ INTC_BASE,           0x48200000 @ INCPS               	  Base Address
.equ INTC_CONTROL,        0x48       @ INTC_CONTROL        	  register offset
.equ INTC_CONFIG,         0x10       @ INTC_SYSCONFIG      	  register offset
.equ INTC_MIR_CLEAR2,     0xC8       @ INTC_MIR_CLEAR2     	  register offset
.equ INTC_MIR_CLEAR3,     0xE8       @ INTC_MIR_CLEAR3     	  register offset
.equ INTC_MIR_SET3,       0xEC       @ INTC_MIR_SET3       	  register offset
.equ INTC_PENDING_IRQ1,	  0xB8		 @ INTC_PENDING_IRQ1	  register offset
.equ INTC_PENDING_IRQ2,   0xD8		 @ INTC_PENDING_IRQ3      register offset
.equ INTC_PENDING_IRQ3,   0xF8       @ INTC_PENDING_IRQ3      register offset
.equ GPIOINT1A,           0x4        @ GPIOINT1A in MIR1/IPI3 Val
.equ TINT3,               0x20       @ TINT3 in MIR2       	  Val
.equ UART4INT,			  0x2000     @ UART4INT in MIR1/IPI1  Val

@ GPIO definitions
.equ GPIO1_BASE,		  0x4804C000  @ GPIO1 				Base Address
.equ GPIO_IRQ_STAT_0,	  0x2C	  	  @ GPIO_IRQSTATUS_0 	register offset
.equ GPIO_31,			  0x80000000  @ GPIO_31 raised bit	Mask

@ UART definitions
.equ UART4_BASE,    	  0x481A8000 @ UART4          	      Base Address
.equ UART_TXHR,	   		  0x0	  	 @ THR Transmit Holding   register offset
.equ UART_LSR,			  0x14		 @ Line control reg		  register offset
.equ UART_MCR,            0x10 	     @ Modem CTRL 			  register offset
.equ UART_MSR,			  0x18		 @ Modem Status Reg 	  register offset
.equ UART_IIR,     		  0x8	 	 @ Interrupt ID		  	  register offset
.equ UART_IER,     	      0x4	 	 @ IER_UART, Int EN       register offset

.equ CTS_CHECK, 		  0x10		 @ Bit 4 used in MSR	  Mask
.equ THR_CHECK,			  0x20       @ Bit 5 used in LSR	  Mask
.equ THR_CLR,			  0xFFFD 	 @ And Clears bit1 in IER Mask
.equ SET_UART_IER,  	  0x000A     @ THRIT,MODEMSTIT 16bit  Val

.equ DELIM,				  0x0D		 @ Final character sent in a messege

@ timer definitions
.equ TIMER3_BASE,         0x48042000  @ DMTIMER3            Base Address
.equ TIMER_TCRR,          0x3C        @ TCRR                register offset
.equ TIMER_TCLR,          0x38        @ TCLR                register offset
.equ TIMER_IRQEN_SET,     0x2C        @ IRQENABLE_SET       register offset
.equ TIMER_IRQEN_CLR,	  0x30		  @ IRQENABLE_CLEAR	    register offset
.equ INT_EN,			  0x02		  @ enable overflow INT Val
.equ RESET_TCLR, 		  0x38		  @ resets TCL			Val
.equ TIMER_COUNTER_VAL,   0xFFFF80FF  @ Store into TLDR and TCRR, 1.00793s

@ Required countdown values to manually set
.equ MSG_LEN, 0x21 @ 33
.equ COUNT, 0x0A

@ register assignment definitions
intcBase  .req  R10
gpio1Base .req  R9
uart4Base .req  R8
timer3Base .req R7

@******************************* start _int_director ***************************
	STMFD SP!, {R3-R5, R7-R10, LR}
	LDR intcBase, =INTC_BASE
	LDR uart4Base, =UART4_BASE
	LDR timer3Base, =TIMER3_BASE
	
UART4_IRQ_TST:
	@ Check to see if UART4 triggered the interrupt
	LDR R3, [intcBase, #INTC_PENDING_IRQ1]
	TST R3, #UART4INT
	BEQ TMR_IRQ_TST
	
	@ Check IIR_UART to see if one of the UART interrupts occured
	LDR R3, [uart4Base, #UART_IIR]
	TST R3, #0x1
	BNE END_SVC

TALKER_SVC:
	@ See if CTS# is asserted
	LDR R3, [uart4Base, #UART_MSR]
	TST R3, #CTS_CHECK
	BNE YES_CTS_THR_TST
	@ else continue NO_CTS_THR_TST

NO_CTS_THR_TST:  @ CTS# not asserted low
	@ Check if THR is empty
	LDR R3, [uart4Base, #UART_LSR]
	TST R3, #THR_CHECK
	BEQ END_SVC  @ CTS# not asserted, THR not empty, return
	
	@ THR is empty, CTS# not asserted, Mask THR interrupt to 0
	LDR R3, [uart4Base, #UART_IER]
	LDR R4, =THR_CLR
	AND R4, R4, R3		@ Clear bit, THR interrupt
	STR R4, [uart4Base, #UART_IER] @ Store result with lowest bit (THR INT) clear
	
	@ Return to wait loop waiting for CTS# to be asserted
	B END_SVC
	
YES_CTS_THR_TST: @ CTS# asserted low
	@ Check if THR is empty
	LDR R3, [uart4Base, #UART_LSR]
	TST R3, #THR_CHECK
	BEQ END_SVC  @ THR not empty, return to wait for THR
	
	LDR R3, [uart4Base, #UART_IER]
	LDR R4, =THR_CLR
	AND R4, R4, R3				   @ Clear bit, THR interrupt
	STR R4, [uart4Base, #UART_IER] @ Store result with lowest bit (THR INT) clear
	@ else continue to SEND_CHAR	
	
SEND_CHAR:
	LDR R3, =CHAR_PTR
   	LDR R4, [R3]
    LDRB R5, [R4], #1			     @ Get character to send, increment addr
   	
    STRB R5, [uart4Base, #UART_TXHR] @ Send char on the UART
    STR R4, [R3]					 @ Store incremented ptr position
    
    LDR R1, =BLASTOFF_LEN
    LDR R2, [R1]
    SUB R2, R2, #0x01
    STR R2, [R1]

	@ Check to see if we are on the last character
	CMP R5, #DELIM
	BLEQ RESET_VALUES
	BEQ END_SVC
	
	@ Set interrupt to generate is CTS# changes state and if Transmit Holding 
	@ Regiser (THR) is empty IF more characters need to be sent.
	MOV R4, #SET_UART_IER
	STR R4, [uart4Base, #UART_IER]
	
	B END_SVC
	
RESET_VALUES:
	STMFD SP!, {R1-R4, R8, LR}

    LDR R1, =BLASTOFF_LEN
    LDR R2, [R1]
    
	@ Reset char pointer	
	CMP R2, #0x0
	LDREQ R1, =CHAR_PTR
	LDREQ R2, =BLASTOFF
	STREQ R2, [R1]
	
	@ Disbale UART interrupts, enabled on next button press
	MOV R4, #0x0
	STR R4, [uart4Base, #UART_IER]
	
	@ Disable RTS#	
	MOV R3, #0x0
	STRB R3, [uart4Base, #UART_MCR]

	LDMFD SP!, {R1-R4, R8, PC} @ go back to int procedure
	
TMR_IRQ_TST:
	@ Check if the timer3 IRQ interrupt occured
	LDR R1, [intcBase, #INTC_PENDING_IRQ2]
	TST R1, #TINT3
	BEQ BTN_IRQ_TST   @ If it was not the timer, check button
	
SVC_TIMER:
	LDR R1, =COUNT_VAL
	LDR R2, [R1] @ get counter value
	CMP R2, #0x0
	BEQ END_COUNTDOWN
	
	SUB R2, R2, #0x01
	STR R2, [R1] @ store decremented value
		
	@ Enable UART4 interrupt for change in CTS# and THR empty
	MOV R3, #SET_UART_IER
	STR R3, [uart4Base, #UART_IER]
	
	@ Assert RTS#, request to send	
	MOV R3, #0x02
	STRB R3, [uart4Base, #UART_MCR]
	
	@ Ensure counter is reset to initial value in TCRR
	LDR R1, =TIMER_COUNTER_VAL
	STR R1, [timer3Base, #TIMER_TCRR]
	
	B END_SVC
	
END_COUNTDOWN:
	@ Reset countdown value
	LDR R1, =COUNT_VAL
	MOV R2, #COUNT
	STR R2, [R1]
	
	@ Disable the timer	
	MOV R1, #0x0 			  @ bit 0 = start bit, bit 1 = auto reload bit
	STR R1, [timer3Base, #TIMER_TCLR] @ Set the TCLR
	
    @ Timer3 disable overflow interrupt
	MOV R1, #0x3
	STR R1, [timer3Base, #TIMER_IRQEN_CLR]
	
	@ prepare to send blast off right away	
	@ Enable UART4 interrupt for change in CTS# and THR empty
	MOV R3, #SET_UART_IER
	STR R3, [uart4Base, #UART_IER]
	
	@ Assert RTS#, request to send	
	MOV R3, #0x02
	STRB R3, [uart4Base, #UART_MCR]
	
	B END_SVC

BTN_IRQ_TST:
	@ Check if INT occured from GPIO1
	LDR R3, [intcBase, #INTC_PENDING_IRQ3]
	TST R3, #GPIOINT1A
	BEQ END_SVC
	
	@ Check if the button on GPIO_31 triggered the interrupt
	LDR gpio1Base, =GPIO1_BASE
	LDR R3, [gpio1Base, #GPIO_IRQ_STAT_0]
	TST R3, #GPIO_31
	BEQ END_SVC @ If GPIO_31 does not have a pending INT, return
	
SVC_BUTTON:
	@ Disable GPIO1_31 intrrupt requests and INTC interrupt requests
	MOV R3, #GPIO_31	
	STR R3, [gpio1Base, #GPIO_IRQ_STAT_0] @ 1 at bit 31 of GPIO_IRQ_STAT_0
	
					@ Timer3 settings
	@ Ensure counter is reset to initial value in TCRR
	LDR R1, =TIMER_COUNTER_VAL
	STR R1, [timer3Base, #TIMER_TCRR]

    @ Timer3 enable overflow interrupt
	MOV R1, #INT_EN
	STR R1, [timer3Base, #TIMER_IRQEN_SET]

	@ Set Auto-reload timer and the start timer bit for TIMER3
	MOV R1, #0x3 			  @ bit 0 = start bit, bit 1 = auto reload bit
	STR R1, [timer3Base, #TIMER_TCLR] @ Set the TCLR 
	
					@ UART4 settings
	@ Enable UART4 interrupt for change in CTS# and THR empty
	MOV R3, #SET_UART_IER
	STR R3, [uart4Base, #UART_IER]

	@ Assert RTS#, request to send	
	MOV R3, #0x02
	STRB R3, [uart4Base, #UART_MCR]
	
	B END_SVC	
	
END_SVC:
	@ Disable NEWIRQA bit so processor can respond to IRQ
	MOV R3, #0x1
	STR R3, [intcBase, #INTC_CONTROL]	

	LDMFD SP!, {R3-R5, R7-R10, LR}
	SUBS PC, LR, #0x4
.end
@****************** EOF ****************