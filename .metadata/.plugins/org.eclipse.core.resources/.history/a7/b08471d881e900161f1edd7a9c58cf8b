@ filename: init_uart4.s
@
@
@ initalizes UART4 and its interrupts
@
@
@ Writen by: James Ross


.text
.global _init_uart4
_init_uart4:
@ UART definitions
.equ UART4_BASE,    0x481A8000 @ UART4          	      Base Address
.equ UART_LCR,      0xC		   @ Line Ctrl 			      register offset
.equ UART_DLH,      0x04 	   @ DLH div latch high       register offset 
.equ UART_DLL,      0x0		   @ DLL div latch low        register offset
.equ UART_MDR1,		0x20	   @ MDR1, Mode def reg 1	  register offset
.equ UART_TXHR,	    0x0	  	   @ THR Transmit Holding     register offset
.equ UART_FCR,      0x8	  	   @ FIFO control		      register offset
.equ MODEM_CTRL,    0x10 	   @ Moden CTRL 		 	  register offset
.equ UART_IIR,      0x8	 	   @ Interrupt ID		      register offset
.equ UART_IER,      0x4	 	   @ IER_UART, Int EN         register offset
.equ SET_UART_IER,  0x000A     @ THRIT,MODEMSTIT 16bit    register offset
.equ LCR_CONF_MODE, 0x0083     @ Char len 8bit, conf mode Mask
.equ LCR_OP_MODE,	0x0003     @ Char len 8bit, op mode   Mask
.equ HIGH_DIV,		0x00	   @ High bytes of divisor	  Val
.equ LOW_DIV,		0x1A 	   @ Low bytes of divisor	  Val
.equ SET_UART16x,	0x0000	   @ sets lower 3 bits to 0	  Val


uart4Base .req R10
lcrReg    .req R9
@************************* Start _init_uart4 ***********************************	
	STMFD SP!, {R0-R10,LR}
	LDR uart4Base, =UART4_BASE
	ADD lcrReg, uart4Base, #UART_LCR
	
	@ Set LCR to mode A, configure mode with char len 8bit, 1 stop bit no parity
	MOV R3, #LCR_CONF_MODE
	STR R3, [lcrReg]

	@ Set diviser latch high and latch low for 115.2kbs
	ADD R3, uart4Base, #UART_DLH
	MOV R4, #HIGH_DIV
	STR R4, [R3]
	
	ADD R3, uart4Base, #UART_DLL
	MOV R4, #LOW_DIV
	STR R4, [R3]
		
	@ Set MDR1 for UART16x mode
	ADD R3, uart4Base, #UART_MDR1
	MOV R4, #SET_UART16x
	STR R4, [R3]
	
	@ Go back into operational mode with char len 8bit, 1 stop bit no parity
	MOV R3, #LCR_OP_MODE	
	STR R3, [lcrReg]
	
	
@*********************** Set interrupt fields **********************************
	
	@ Set interrupt to generate is CTS# changes state and if Transmit Holding 
	@ Regiser (THR) is empty
	ADD R3, uart4Base, #UART_IER
	MOV R4, #SET_UART_IER
	STR R4, [R3]
	
	LDMFD SP!, {R0-R10, PC}
.end
@********** EOF ************